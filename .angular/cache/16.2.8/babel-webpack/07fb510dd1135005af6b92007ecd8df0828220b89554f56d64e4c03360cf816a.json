{"ast":null,"code":"import { FormControl } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nexport class FormService {\n  constructor(fb) {\n    this.fb = fb;\n    this.tableForm = this.fb.group({\n      areas: this.fb.array([this.fb.group({\n        area: FormControl\n        /*rows: this.fb.array([\n          this.fb.group({\n            area: FormControl,\n            tableCounter: FormControl,\n            tableTotal: FormControl,\n            tableAdjustment: FormControl,\n          }),\n        ]),*/\n      })])\n    });\n  }\n\n  groupTables(tableData) {\n    const result = tableData.reduce((accumulatedRows, row) => {\n      accumulatedRows[row.area] = accumulatedRows[row.area] || [];\n      accumulatedRows[row.area].push(row);\n      return accumulatedRows;\n    }, Object.create(null));\n    console.log('Result: ', result);\n    return result;\n  }\n  tableAreaRowsForm(row) {\n    return this.fb.group({\n      area: this.fb.control(row.area),\n      tableCounter: this.fb.group(row.tableCounter),\n      tableTotal: this.fb.group(row.tableTotal),\n      tableAdjustment: this.fb.group(row.tableAdjustment)\n    });\n  }\n  addTableAreas(rows, area) {\n    /*const areaRows = rows[area].map((row: SomeTableDto) => {\n      return this.tableAreaRowsForm(row);\n    });*/\n    this.tableForm.controls.areas.push(this.fb.group({\n      area: area\n    }));\n  }\n  updateTableForm(rows) {\n    this.tableForm.controls.areas.clear();\n    console.log('ROWS: ', rows);\n    Object.keys(rows).map(area => {\n      this.addTableAreas(rows, area);\n    });\n    /*rows.map(area => {\n      this.addTableAreas(rows, area);\n    });*/\n    return this.tableForm;\n  }\n  static #_ = this.ɵfac = function FormService_Factory(t) {\n    return new (t || FormService)(i0.ɵɵinject(i1.FormBuilder));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FormService,\n    factory: FormService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["FormControl","FormService","constructor","fb","tableForm","group","areas","array","area","groupTables","tableData","result","reduce","accumulatedRows","row","push","Object","create","console","log","tableAreaRowsForm","control","tableCounter","tableTotal","tableAdjustment","addTableAreas","rows","controls","updateTableForm","clear","keys","map","_","i0","ɵɵinject","i1","FormBuilder","_2","factory","ɵfac","providedIn"],"sources":["/home/thomaskv/code/learn/angular-reactive-form-table/src/app/service/form.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  FormArray,\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\n\nimport { SomeTableDto } from '../model/some-table.model';\n\nexport interface TableFormArea {\n  area: FormControl;\n  //rows: FormArray<FormGroup<TableFormRow>>;\n}\n\nexport interface TableFormRow {\n  area: FormControl;\n  tableCounter: FormControl;\n  tableTotal: FormControl;\n  tableAdjustment: FormControl;\n}\n\nexport interface TableRow {\n  area: string;\n  tableCounter: string;\n  tableTotal: string;\n  tableAdjustment: string;\n}\n\nexport interface TableFormAreas {\n  areas: FormArray<FormGroup<TableFormArea>>;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FormService {\n  constructor(private fb: FormBuilder) {}\n\n  public groupTables(tableData: SomeTableDto[]): SomeTableDto[][] {\n    const result: SomeTableDto[][] = tableData.reduce((accumulatedRows, row) => {\n      accumulatedRows[row.area] = accumulatedRows[row.area] || [];\n      accumulatedRows[row.area].push(row);\n      return accumulatedRows;\n    }, Object.create(null));\n    console.log('Result: ', result);\n    return result;\n  }\n\n  public tableForm: FormGroup<TableFormAreas> = this.fb.group({\n    areas: this.fb.array([\n      this.fb.group({\n        area: FormControl,\n        /*rows: this.fb.array([\n          this.fb.group({\n            area: FormControl,\n            tableCounter: FormControl,\n            tableTotal: FormControl,\n            tableAdjustment: FormControl,\n          }),\n        ]),*/\n      }),\n    ]),\n  });\n\n  private tableAreaRowsForm(row: SomeTableDto): FormGroup<TableFormRow> {\n    return this.fb.group({\n      area: this.fb.control(row.area),\n      tableCounter: this.fb.group(row.tableCounter),\n      tableTotal: this.fb.group(row.tableTotal),\n      tableAdjustment: this.fb.group(row.tableAdjustment),\n    });\n  }\n\n\n  private addTableAreas(rows: SomeTableDto[][], area: string) {\n    /*const areaRows = rows[area].map((row: SomeTableDto) => {\n      return this.tableAreaRowsForm(row);\n    });*/\n\n    this.tableForm.controls.areas.push(\n      this.fb.group({\n        area: area\n      })\n    );\n  }\n\n\n  public updateTableForm(rows: SomeTableDto[][]) {\n    this.tableForm.controls.areas.clear();\n    console.log('ROWS: ', rows);\n\n    Object.keys(rows).map(area => {\n      this.addTableAreas(rows, area);\n    });\n\n    /*rows.map(area => {\n      this.addTableAreas(rows, area);\n    });*/\n\n    return this.tableForm;\n  }\n}\n"],"mappings":"AACA,SAGEA,WAAW,QAGN,gBAAgB;;;AA8BvB,OAAM,MAAOC,WAAW;EACtBC,YAAoBC,EAAe;IAAf,KAAAA,EAAE,GAAFA,EAAE;IAYf,KAAAC,SAAS,GAA8B,IAAI,CAACD,EAAE,CAACE,KAAK,CAAC;MAC1DC,KAAK,EAAE,IAAI,CAACH,EAAE,CAACI,KAAK,CAAC,CACnB,IAAI,CAACJ,EAAE,CAACE,KAAK,CAAC;QACZG,IAAI,EAAER;QACN;;;;;;;;OAQD,CAAC,CACH;KACF,CAAC;EA1BoC;;EAE/BS,WAAWA,CAACC,SAAyB;IAC1C,MAAMC,MAAM,GAAqBD,SAAS,CAACE,MAAM,CAAC,CAACC,eAAe,EAAEC,GAAG,KAAI;MACzED,eAAe,CAACC,GAAG,CAACN,IAAI,CAAC,GAAGK,eAAe,CAACC,GAAG,CAACN,IAAI,CAAC,IAAI,EAAE;MAC3DK,eAAe,CAACC,GAAG,CAACN,IAAI,CAAC,CAACO,IAAI,CAACD,GAAG,CAAC;MACnC,OAAOD,eAAe;IACxB,CAAC,EAAEG,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC,CAAC;IACvBC,OAAO,CAACC,GAAG,CAAC,UAAU,EAAER,MAAM,CAAC;IAC/B,OAAOA,MAAM;EACf;EAkBQS,iBAAiBA,CAACN,GAAiB;IACzC,OAAO,IAAI,CAACX,EAAE,CAACE,KAAK,CAAC;MACnBG,IAAI,EAAE,IAAI,CAACL,EAAE,CAACkB,OAAO,CAACP,GAAG,CAACN,IAAI,CAAC;MAC/Bc,YAAY,EAAE,IAAI,CAACnB,EAAE,CAACE,KAAK,CAACS,GAAG,CAACQ,YAAY,CAAC;MAC7CC,UAAU,EAAE,IAAI,CAACpB,EAAE,CAACE,KAAK,CAACS,GAAG,CAACS,UAAU,CAAC;MACzCC,eAAe,EAAE,IAAI,CAACrB,EAAE,CAACE,KAAK,CAACS,GAAG,CAACU,eAAe;KACnD,CAAC;EACJ;EAGQC,aAAaA,CAACC,IAAsB,EAAElB,IAAY;IACxD;;;IAIA,IAAI,CAACJ,SAAS,CAACuB,QAAQ,CAACrB,KAAK,CAACS,IAAI,CAChC,IAAI,CAACZ,EAAE,CAACE,KAAK,CAAC;MACZG,IAAI,EAAEA;KACP,CAAC,CACH;EACH;EAGOoB,eAAeA,CAACF,IAAsB;IAC3C,IAAI,CAACtB,SAAS,CAACuB,QAAQ,CAACrB,KAAK,CAACuB,KAAK,EAAE;IACrCX,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEO,IAAI,CAAC;IAE3BV,MAAM,CAACc,IAAI,CAACJ,IAAI,CAAC,CAACK,GAAG,CAACvB,IAAI,IAAG;MAC3B,IAAI,CAACiB,aAAa,CAACC,IAAI,EAAElB,IAAI,CAAC;IAChC,CAAC,CAAC;IAEF;;;IAIA,OAAO,IAAI,CAACJ,SAAS;EACvB;EAAC,QAAA4B,CAAA,G;qBAjEU/B,WAAW,EAAAgC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXpC,WAAW;IAAAqC,OAAA,EAAXrC,WAAW,CAAAsC,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}