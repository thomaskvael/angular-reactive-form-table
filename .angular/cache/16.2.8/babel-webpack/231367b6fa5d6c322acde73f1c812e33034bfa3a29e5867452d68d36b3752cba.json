{"ast":null,"code":"import { FormControl } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nexport class FormService {\n  constructor(fb) {\n    this.fb = fb;\n    this.tableForm = this.fb.group({\n      areas: this.fb.array([this.fb.group({\n        area: FormControl,\n        rows: this.fb.array([this.fb.group({\n          area: FormControl,\n          tableCounter: FormControl,\n          tableTotal: FormControl,\n          tableAdjustment: FormControl\n        })])\n      })])\n    });\n  }\n  groupTables(tableData) {\n    const result = tableData.reduce((accumulatedRows, row) => {\n      accumulatedRows[row.area] = accumulatedRows[row.area] || [];\n      accumulatedRows[row.area].push(row);\n      return accumulatedRows;\n    }, Object.create(null));\n    console.log('Result: ', result);\n    return result;\n  }\n  addTableAreas(rows, biddingZone) {\n    const biddingZoneRows = rows[biddingZone].map(row => {\n      return this.tableAreaRowsForm(row);\n    });\n    this.tableForm.controls.areas.push(this.fb.group({\n      biddingZone: biddingZone,\n      rows: this.fb.array(biddingZoneRows)\n    }));\n  }\n  updateTableForm(rows) {\n    this.tableForm.controls.areas.clear();\n    console.log('ROWS: ', rows);\n    Object.keys(rows).map(biddingZone => {\n      this.addTableAreas(rows, biddingZone);\n    });\n    return this.tableForm;\n  }\n  static #_ = this.ɵfac = function FormService_Factory(t) {\n    return new (t || FormService)(i0.ɵɵinject(i1.FormBuilder));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FormService,\n    factory: FormService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["FormControl","FormService","constructor","fb","tableForm","group","areas","array","area","rows","tableCounter","tableTotal","tableAdjustment","groupTables","tableData","result","reduce","accumulatedRows","row","push","Object","create","console","log","addTableAreas","biddingZone","biddingZoneRows","map","tableAreaRowsForm","controls","updateTableForm","clear","keys","_","i0","ɵɵinject","i1","FormBuilder","_2","factory","ɵfac","providedIn"],"sources":["/home/thomaskv/code/learn/angular-reactive-form-table/src/app/service/form.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  FormArray,\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\n\nimport { SomeTableDto } from '../model/some-table.model';\n\nexport interface TableFormArea {\n  area: FormControl;\n  rows: FormArray<FormGroup<TableFormRow>>;\n}\n\nexport interface TableFormRow {\n  area: FormControl;\n  tableCounter: FormControl;\n  tableTotal: FormControl;\n  tableAdjustment: FormControl;\n}\n\nexport interface TableFormAreas {\n  areas: FormArray<FormGroup<TableFormArea>>;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FormService {\n  constructor(private fb: FormBuilder) {}\n\n  public groupTables(tableData: SomeTableDto[]): FormGroup[] {\n    const result: FormGroup[] = tableData.reduce((accumulatedRows, row) => {\n      accumulatedRows[row.area] = accumulatedRows[row.area] || [];\n      accumulatedRows[row.area].push(row);\n      return accumulatedRows;\n    }, Object.create(null));\n    console.log('Result: ', result);\n    return result;\n  }\n\n  public tableForm: FormGroup<TableFormAreas> = this.fb.group({\n    areas: this.fb.array([\n      this.fb.group({\n        area: FormControl,\n        rows: this.fb.array([\n          this.fb.group({\n            area: FormControl,\n            tableCounter: FormControl,\n            tableTotal: FormControl,\n            tableAdjustment: FormControl,\n          }),\n        ]),\n      }),\n    ]),\n  });\n\n\n  private addTableAreas(rows: MfrrRequestTableRows[], biddingZone) {\n    const biddingZoneRows = rows[biddingZone].map(row => {\n      return this.tableAreaRowsForm(row);\n    });\n\n    this.tableForm.controls.areas.push(\n      this.fb.group({\n        biddingZone: biddingZone,\n        rows: this.fb.array(biddingZoneRows)\n      })\n    );\n  }\n\n\n  public updateTableForm(rows: MfrrRequestTableRows[]) {\n    this.tableForm.controls.areas.clear();\n    console.log('ROWS: ', rows);\n\n    Object.keys(rows).map(biddingZone => {\n      this.addTableAreas(rows, biddingZone);\n    });\n\n    return this.tableForm;\n  }\n}\n"],"mappings":"AACA,SAGEA,WAAW,QAGN,gBAAgB;;;AAuBvB,OAAM,MAAOC,WAAW;EACtBC,YAAoBC,EAAe;IAAf,KAAAA,EAAE,GAAFA,EAAE;IAYf,KAAAC,SAAS,GAA8B,IAAI,CAACD,EAAE,CAACE,KAAK,CAAC;MAC1DC,KAAK,EAAE,IAAI,CAACH,EAAE,CAACI,KAAK,CAAC,CACnB,IAAI,CAACJ,EAAE,CAACE,KAAK,CAAC;QACZG,IAAI,EAAER,WAAW;QACjBS,IAAI,EAAE,IAAI,CAACN,EAAE,CAACI,KAAK,CAAC,CAClB,IAAI,CAACJ,EAAE,CAACE,KAAK,CAAC;UACZG,IAAI,EAAER,WAAW;UACjBU,YAAY,EAAEV,WAAW;UACzBW,UAAU,EAAEX,WAAW;UACvBY,eAAe,EAAEZ;SAClB,CAAC,CACH;OACF,CAAC,CACH;KACF,CAAC;EA1BoC;EAE/Ba,WAAWA,CAACC,SAAyB;IAC1C,MAAMC,MAAM,GAAgBD,SAAS,CAACE,MAAM,CAAC,CAACC,eAAe,EAAEC,GAAG,KAAI;MACpED,eAAe,CAACC,GAAG,CAACV,IAAI,CAAC,GAAGS,eAAe,CAACC,GAAG,CAACV,IAAI,CAAC,IAAI,EAAE;MAC3DS,eAAe,CAACC,GAAG,CAACV,IAAI,CAAC,CAACW,IAAI,CAACD,GAAG,CAAC;MACnC,OAAOD,eAAe;IACxB,CAAC,EAAEG,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC,CAAC;IACvBC,OAAO,CAACC,GAAG,CAAC,UAAU,EAAER,MAAM,CAAC;IAC/B,OAAOA,MAAM;EACf;EAmBQS,aAAaA,CAACf,IAA4B,EAAEgB,WAAW;IAC7D,MAAMC,eAAe,GAAGjB,IAAI,CAACgB,WAAW,CAAC,CAACE,GAAG,CAACT,GAAG,IAAG;MAClD,OAAO,IAAI,CAACU,iBAAiB,CAACV,GAAG,CAAC;IACpC,CAAC,CAAC;IAEF,IAAI,CAACd,SAAS,CAACyB,QAAQ,CAACvB,KAAK,CAACa,IAAI,CAChC,IAAI,CAAChB,EAAE,CAACE,KAAK,CAAC;MACZoB,WAAW,EAAEA,WAAW;MACxBhB,IAAI,EAAE,IAAI,CAACN,EAAE,CAACI,KAAK,CAACmB,eAAe;KACpC,CAAC,CACH;EACH;EAGOI,eAAeA,CAACrB,IAA4B;IACjD,IAAI,CAACL,SAAS,CAACyB,QAAQ,CAACvB,KAAK,CAACyB,KAAK,EAAE;IACrCT,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEd,IAAI,CAAC;IAE3BW,MAAM,CAACY,IAAI,CAACvB,IAAI,CAAC,CAACkB,GAAG,CAACF,WAAW,IAAG;MAClC,IAAI,CAACD,aAAa,CAACf,IAAI,EAAEgB,WAAW,CAAC;IACvC,CAAC,CAAC;IAEF,OAAO,IAAI,CAACrB,SAAS;EACvB;EAAC,QAAA6B,CAAA,G;qBArDUhC,WAAW,EAAAiC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXrC,WAAW;IAAAsC,OAAA,EAAXtC,WAAW,CAAAuC,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}