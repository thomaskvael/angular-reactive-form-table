{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nexport class FormService {\n  constructor(fb) {\n    this.fb = fb;\n    this.tableForm = this.fb.group({\n      areas: this.fb.array([this.fb.group({\n        area: FormControl,\n        rows: this.fb.array([this.fb.group({\n          area: FormControl,\n          tableCounter: FormControl,\n          tableTotal: FormControl,\n          tableAdjustment: FormControl\n        })])\n      })])\n    });\n  }\n  groupTables(tableData) {\n    const result = tableData.reduce((accumulatedRows, row) => {\n      accumulatedRows[row.area] = accumulatedRows[row.area] || [];\n      accumulatedRows[row.area].push(row);\n      return accumulatedRows;\n    }, Object.create(null));\n    return result;\n  }\n  tableAreaRowsForm(row) {\n    return this.fb.group({\n      area: this.fb.control(row.area),\n      tableCounter: this.fb.control(row.tableCounter, Validators.max(15)),\n      tableTotal: this.fb.control(row.tableTotal, Validators.max(15)),\n      tableAdjustment: this.fb.control(row.tableAdjustment, Validators.max(15))\n    }, {\n      validator: this.onlyOneColumn\n    });\n  }\n  addTableAreas(rows, area) {\n    const areaRows = rows[area].map(row => {\n      return this.tableAreaRowsForm(row);\n    });\n    this.tableForm.controls.areas.push(this.fb.group({\n      area: area,\n      rows: this.fb.array(areaRows)\n    }));\n  }\n  updateTableForm(rows) {\n    this.tableForm.controls.areas.clear();\n    Object.keys(rows).map(area => {\n      this.addTableAreas(rows, area);\n    });\n    return this.tableForm;\n  }\n  //Validator\n  onlyOneColumn(group) {\n    if (group instanceof FormGroup) {\n      const groupControls = Object.keys(group.controls);\n      groupControls.map(control => {\n        console.log(group[control]);\n      });\n    }\n    /*if (!control.value.startsWith('https') || !control.value.includes('.io')) {\n      return { invalidUrl: true };\n    }*/\n    return null;\n  }\n  static #_ = this.ɵfac = function FormService_Factory(t) {\n    return new (t || FormService)(i0.ɵɵinject(i1.FormBuilder));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FormService,\n    factory: FormService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["FormControl","FormGroup","Validators","FormService","constructor","fb","tableForm","group","areas","array","area","rows","tableCounter","tableTotal","tableAdjustment","groupTables","tableData","result","reduce","accumulatedRows","row","push","Object","create","tableAreaRowsForm","control","max","validator","onlyOneColumn","addTableAreas","areaRows","map","controls","updateTableForm","clear","keys","groupControls","console","log","_","i0","ɵɵinject","i1","FormBuilder","_2","factory","ɵfac","providedIn"],"sources":["/home/thomaskv/code/learn/angular-reactive-form-table/src/app/service/form.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  AbstractControl,\n  FormArray,\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\n\nimport { SomeTableDto } from '../model/some-table.model';\n\nexport interface TableFormArea {\n  area: FormControl;\n  rows: FormArray<FormGroup<TableFormRow>>;\n}\n\nexport interface TableFormRow {\n  area: FormControl;\n  tableCounter: FormControl;\n  tableTotal: FormControl;\n  tableAdjustment: FormControl;\n}\n\nexport interface TableRow {\n  area: string;\n  tableCounter: string;\n  tableTotal: string;\n  tableAdjustment: string;\n}\n\nexport interface TableFormAreas {\n  areas: FormArray<FormGroup<TableFormArea>>;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FormService {\n  constructor(private fb: FormBuilder) {}\n\n  public groupTables(tableData: SomeTableDto[]): SomeTableDto[][] {\n    const result: SomeTableDto[][] = tableData.reduce((accumulatedRows, row) => {\n      accumulatedRows[row.area] = accumulatedRows[row.area] || [];\n      accumulatedRows[row.area].push(row);\n      return accumulatedRows;\n    }, Object.create(null));\n    return result;\n  }\n\n  public tableForm: FormGroup<TableFormAreas> = this.fb.group({\n    areas: this.fb.array([\n      this.fb.group({\n        area: FormControl<string>,\n        rows: this.fb.array([\n          this.fb.group({\n            area: FormControl<string>,\n            tableCounter: FormControl<number>,\n            tableTotal: FormControl<number>,\n            tableAdjustment: FormControl<number>,\n          }),\n        ]),\n      }),\n    ]),\n  });\n\n  private tableAreaRowsForm(row: SomeTableDto): FormGroup<TableFormRow> {\n    return this.fb.group({\n      area: this.fb.control(row.area),\n      tableCounter: this.fb.control(row.tableCounter, Validators.max(15)),\n      tableTotal: this.fb.control(row.tableTotal, Validators.max(15)),\n      tableAdjustment: this.fb.control(row.tableAdjustment, Validators.max(15)),\n    }, {validator: this.onlyOneColumn});\n  }\n\n\n  private addTableAreas(rows: SomeTableDto[][], area) {\n    const areaRows = rows[area].map((row: SomeTableDto) => {\n      return this.tableAreaRowsForm(row);\n    });\n\n    this.tableForm.controls.areas.push(\n      this.fb.group({\n        area: area,\n        rows: this.fb.array(areaRows)\n      })\n    );\n  }\n\n\n  public updateTableForm(rows: SomeTableDto[][]) {\n    this.tableForm.controls.areas.clear();\n\n    Object.keys(rows).map(area => {\n      this.addTableAreas(rows, area);\n    });\n\n    return this.tableForm;\n  }\n\n\n  //Validator\n  private onlyOneColumn(group: AbstractControl) {\n    if (group instanceof FormGroup) {\n      const groupControls = Object.keys(group.controls);\n      groupControls.map(control => {\n        console.log(group[control])\n      })\n    }\n\n    /*if (!control.value.startsWith('https') || !control.value.includes('.io')) {\n      return { invalidUrl: true };\n    }*/\n    return null;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}