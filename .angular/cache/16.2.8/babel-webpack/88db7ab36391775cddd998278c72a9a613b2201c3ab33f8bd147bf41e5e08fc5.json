{"ast":null,"code":"import { tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/facade/table.facade.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction TablesComponent_div_2_div_2_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵelement(1, \"input\", 5);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const area_r3 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵproperty(\"formGroupName\", area_r3);\n  }\n}\nfunction TablesComponent_div_2_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 4);\n    i0.ɵɵelement(2, \"input\", 5);\n    i0.ɵɵelementStart(3, \"div\", 6);\n    i0.ɵɵtext(4);\n    i0.ɵɵtemplate(5, TablesComponent_div_2_div_2_div_5_Template, 2, 1, \"div\", 7);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const area_r3 = ctx.$implicit;\n    const i_r4 = ctx.index;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formGroupName\", i_r4);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", area_r3.controls.area.value, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", area_r3);\n  }\n}\nfunction TablesComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1)(1, \"div\", 2);\n    i0.ɵɵtemplate(2, TablesComponent_div_2_div_2_Template, 6, 3, \"div\", 3);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const tableForm_r1 = ctx.ngIf;\n    i0.ɵɵproperty(\"formGroup\", tableForm_r1);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", tableForm_r1.controls.areas.value);\n  }\n}\nexport class TablesComponent {\n  constructor(tableFacade) {\n    this.tableFacade = tableFacade;\n    this.tableForm = this.tableFacade.myForm;\n    this.tableForm$ = this.tableFacade.tableForm$.pipe(tap(v => console.log('tap: ', v)));\n  }\n  static #_ = this.ɵfac = function TablesComponent_Factory(t) {\n    return new (t || TablesComponent)(i0.ɵɵdirectiveInject(i1.TableFacade));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TablesComponent,\n    selectors: [[\"app-tables\"]],\n    decls: 4,\n    vars: 3,\n    consts: [[3, \"formGroup\", 4, \"ngIf\"], [3, \"formGroup\"], [\"formArrayName\", \"areas\"], [4, \"ngFor\", \"ngForOf\"], [3, \"formGroupName\"], [\"formControlName\", \"area\"], [\"formArrayName\", \"rows\"], [3, \"formGroupName\", 4, \"ngFor\", \"ngForOf\"]],\n    template: function TablesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h1\");\n        i0.ɵɵtext(1, \"Tables\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(2, TablesComponent_div_2_Template, 3, 2, \"div\", 0);\n        i0.ɵɵpipe(3, \"async\");\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(3, 1, ctx.tableForm$));\n      }\n    },\n    dependencies: [i2.NgForOf, i2.NgIf, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName, i3.FormGroupName, i3.FormArrayName, i2.AsyncPipe],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["tap","i0","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","ɵɵproperty","area_r3","ɵɵtext","ɵɵtemplate","TablesComponent_div_2_div_2_div_5_Template","ɵɵadvance","i_r4","ɵɵtextInterpolate1","controls","area","value","TablesComponent_div_2_div_2_Template","tableForm_r1","areas","TablesComponent","constructor","tableFacade","tableForm","myForm","tableForm$","pipe","v","console","log","_","ɵɵdirectiveInject","i1","TableFacade","_2","selectors","decls","vars","consts","template","TablesComponent_Template","rf","ctx","TablesComponent_div_2_Template","ɵɵpipeBind1"],"sources":["/home/thomaskv/code/learn/angular-reactive-form-table/src/app/components/tables/tables.component.ts","/home/thomaskv/code/learn/angular-reactive-form-table/src/app/components/tables/tables.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Observable, tap } from 'rxjs';\nimport { TableFacade } from 'src/app/facade/table.facade.service';\nimport { TableFormAreas } from 'src/app/service/form.service';\n\n@Component({\n  selector: 'app-tables',\n  templateUrl: './tables.component.html',\n  styleUrls: ['./tables.component.css'],\n})\nexport class TablesComponent {\n  constructor(\n    private tableFacade: TableFacade\n  ) { }\n\n  public tableForm = this.tableFacade.myForm;\n\n  public tableForm$: Observable<FormGroup<TableFormAreas>> = this.tableFacade.tableForm$.pipe(tap(v => console.log('tap: ', v)));\n}\n","<h1>Tables</h1>\n\n<div *ngIf=\"tableForm$ | async as tableForm\" [formGroup]=\"tableForm\">\n\n<div formArrayName=\"areas\">\n\n    <div *ngFor=\"let area of tableForm.controls.areas.value; let i=index;\">\n        <div [formGroupName]=\"i\">\n            <input formControlName=\"area\" />\n            <div formArrayName=\"rows\">\n                {{ area.controls.area.value }}\n                <div *ngFor=\"let row of area; let j = index;\" [formGroupName]=\"area\">\n                    <input formControlName=\"area\" />\n                </div>\n                <!--<div *ngFor=\"let row of area; let j = index;\">\n                    <div [formGroup]=\"row\">\n                        <input formControlName=\"area\" />\n                    </div>\n                </div>-->\n            </div>\n        </div>\n    </div>\n  \n</div>\n\n<!--<div *ngFor=\"let tableForm of tableForm$ | async\">\n<p>Hmm</p>\n<app-some-table [tableForm]=\"tableForm\"></app-some-table>\n</div>-->\n\n</div>"],"mappings":"AAEA,SAAqBA,GAAG,QAAQ,MAAM;;;;;;;ICStBC,EAAA,CAAAC,cAAA,aAAqE;IACjED,EAAA,CAAAE,SAAA,eAAgC;IACpCF,EAAA,CAAAG,YAAA,EAAM;;;;IAFwCH,EAAA,CAAAI,UAAA,kBAAAC,OAAA,CAAsB;;;;;IALhFL,EAAA,CAAAC,cAAA,UAAuE;IAE/DD,EAAA,CAAAE,SAAA,eAAgC;IAChCF,EAAA,CAAAC,cAAA,aAA0B;IACtBD,EAAA,CAAAM,MAAA,GACA;IAAAN,EAAA,CAAAO,UAAA,IAAAC,0CAAA,iBAEM;IAMVR,EAAA,CAAAG,YAAA,EAAM;;;;;IAZLH,EAAA,CAAAS,SAAA,GAAmB;IAAnBT,EAAA,CAAAI,UAAA,kBAAAM,IAAA,CAAmB;IAGhBV,EAAA,CAAAS,SAAA,GACA;IADAT,EAAA,CAAAW,kBAAA,MAAAN,OAAA,CAAAO,QAAA,CAAAC,IAAA,CAAAC,KAAA,MACA;IAAqBd,EAAA,CAAAS,SAAA,GAAS;IAATT,EAAA,CAAAI,UAAA,YAAAC,OAAA,CAAS;;;;;IAT9CL,EAAA,CAAAC,cAAA,aAAqE;IAIjED,EAAA,CAAAO,UAAA,IAAAQ,oCAAA,iBAeM;IAEVf,EAAA,CAAAG,YAAA,EAAM;;;;IArBuCH,EAAA,CAAAI,UAAA,cAAAY,YAAA,CAAuB;IAI1ChB,EAAA,CAAAS,SAAA,GAAmC;IAAnCT,EAAA,CAAAI,UAAA,YAAAY,YAAA,CAAAJ,QAAA,CAAAK,KAAA,CAAAH,KAAA,CAAmC;;;ADK7D,OAAM,MAAOI,eAAe;EAC1BC,YACUC,WAAwB;IAAxB,KAAAA,WAAW,GAAXA,WAAW;IAGd,KAAAC,SAAS,GAAG,IAAI,CAACD,WAAW,CAACE,MAAM;IAEnC,KAAAC,UAAU,GAA0C,IAAI,CAACH,WAAW,CAACG,UAAU,CAACC,IAAI,CAACzB,GAAG,CAAC0B,CAAC,IAAIC,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEF,CAAC,CAAC,CAAC,CAAC;EAJ1H;EAAC,QAAAG,CAAA,G;qBAHMV,eAAe,EAAAlB,EAAA,CAAA6B,iBAAA,CAAAC,EAAA,CAAAC,WAAA;EAAA;EAAA,QAAAC,EAAA,G;UAAfd,eAAe;IAAAe,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,yBAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCX5BvC,EAAA,CAAAC,cAAA,SAAI;QAAAD,EAAA,CAAAM,MAAA,aAAM;QAAAN,EAAA,CAAAG,YAAA,EAAK;QAEfH,EAAA,CAAAO,UAAA,IAAAkC,8BAAA,iBA4BM;;;;QA5BAzC,EAAA,CAAAS,SAAA,GAAyB;QAAzBT,EAAA,CAAAI,UAAA,SAAAJ,EAAA,CAAA0C,WAAA,OAAAF,GAAA,CAAAjB,UAAA,EAAyB"},"metadata":{},"sourceType":"module","externalDependencies":[]}